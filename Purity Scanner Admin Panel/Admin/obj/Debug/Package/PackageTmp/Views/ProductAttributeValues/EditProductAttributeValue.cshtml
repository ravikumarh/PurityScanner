@model Admin.Models.clsProductAttributeValue
@{

    HtmlHelper.ClientValidationEnabled = false;
}
@using (Html.BeginForm("ProductAttributeValueEdit", "ProductAttributeValues", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @*@Html.ValidationSummary(true)*@
        @Html.HiddenFor(model => model.ProductAttributeValuesID)
        @Html.HiddenFor(model => model.FilterProductID)
        @Html.HiddenFor(model => model.FilterSubProductID)
        @Html.HiddenFor(model => model.FilterAttributeID)
        @Html.HiddenFor(model => model.FilterLanguageID)


        <div class="form-group">
            @Html.LabelFor(model => model.ProductID, new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.ProductID, new SelectList(Model.ListProduct, "ProductID", "ProductName"), "Select Product", new { @class = "form-control", id = "editProductID", @onchange = "editvalidData()" })
                @Html.ValidationMessageFor(model => model.ProductID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SubProductID, new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.SubProductID, new SelectList(Model.ListSubProduct, "SubProductID", "SubProductName"), "Select Sub Product", new { @class = "form-control", id = "editSubProductID", @onchange = "editvalidData()" })
                @Html.ValidationMessageFor(model => model.SubProductID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AttributeID, new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.AttributeID, new SelectList(Model.ListAttribute, "AttributeID", "AttributeName"), "Select Attribute", new { @class = "form-control", id = "editAttributeID", @onchange = "editvalidData()" })
                @Html.ValidationMessageFor(model => model.AttributeID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LanguageID, new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.LanguageID, new SelectList(Model.ListLanguage, "LanguageID", "LanguageName"), "Select Language", new { @class = "form-control", id = "editLanguageID", @onchange = "editvalidData()" })
                @Html.ValidationMessageFor(model => model.LanguageID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductAttributeValues, new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.ProductAttributeValues, new { @class = "form-control", id = "editProductAttributeValues", @onfocusout = "editvalidData()" })
                @Html.ValidationMessageFor(model => model.ProductAttributeValues)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShortDescription, new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.ShortDescription, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ShortDescription)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ManifestoInformation, new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @*@Html.TextAreaFor(model => model.ManifestoInformation, new { @class = "form-control",id="addManifestoArea" })
                @Html.ValidationMessageFor(model => model.ManifestoInformation)*@
            </div>
        </div>

        <div class="form-group">

            <div class="col-md-12">
                @Html.TextAreaFor(model => model.ManifestoInformation, new { @class = "form-control", id = "addManifestoArea1" })
                @Html.ValidationMessageFor(model => model.ManifestoInformation)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-8 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" onclick="return editvalidData();" />
                <button type="button" data-dismiss="modal" class="btn btn-default">Cancel</button>
            </div>
        </div>
    </div>
}

<script type="text/javascript">

    CKEDITOR.replace('addManifestoArea1');
</script>


<script type="text/jscript">

    function editvalidData() {

        var prodID = $('#editProductID').val();
        var subProdID = $('#editSubProductID').val();
        var attriID = $('#editAttributeID').val();
        var langID = $('#editLanguageID').val();
        var attriValue = $('#editProductAttributeValues').val().trim();;


        if (prodID) {
            $('#editProductID').css('border-color', '');
        }
        else {
            $('#editProductID').css('border-color', 'red');
        }

        if (subProdID) {
            $('#editSubProductID').css('border-color', '');
        }
        else {
            $('#editSubProductID').css('border-color', 'red');
        }

        if (attriID) {
            $('#editAttributeID').css('border-color', '');
        }
        else {
            $('#editAttributeID').css('border-color', 'red');
        }

        if (langID) {
            $('#editLanguageID').css('border-color', '');
        }
        else {
            $('#editLanguageID').css('border-color', 'red');
        }

        if (attriValue) {
            $('#editProductAttributeValues').css('border-color', '');
        }
        else {
            $('#editProductAttributeValues').css('border-color', 'red');
        }

        if (prodID && subProdID && attriID && langID && attriValue) {
            return true;
        }
        else {
            return false;
        }

        return false;
    }
</script>